type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    public class Seat {

        int row;
        int column;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/controller/Controller.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.dto.PageDTO;
    import cinema.service.RoomService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;

    @org.springframework.stereotype.Controller
    public class Controller {

        private final RoomService roomService;

        @Autowired
        public Controller(RoomService roomService) {
            this.roomService = roomService;
        }

        @GetMapping("/seats")
        public ResponseEntity<PageDTO> getSeats(){
            PageDTO p = new PageDTO();

            p.setTotalRows(roomService.getTotalRows());
            p.setTotalColumns(roomService.getTotalColumns());
            p.setAvailableSeats(roomService.getAvailableSeats());

            return ResponseEntity.ok(p);

        }
    }
  learner_created: true
- name: src/cinema/service/RoomImpl.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Seat;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    import java.util.ArrayList;

    @Configuration
    public class RoomImpl implements RoomService {
        int totalRows = 9;
        int totalColumns = 9;
        ArrayList<Seat> availableSeats = new ArrayList<>();

        public RoomImpl() {
        }

        @Bean
        @Override
        public ArrayList<Seat> getAvailableSeats() {

                //Row
                for (int i = 0; i < totalRows ; i++) {
                    int column = 1;
                    int row = i+1;

                    //column
                    while (column < totalColumns + 1){

                        availableSeats.add(new Seat(row, column));
                        column++;
                    }

                }


                return availableSeats;

        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }
    }
  learner_created: true
- name: src/cinema/dto/PageDTO.java
  visible: true
  text: |-
    package cinema.dto;

    import java.util.List;
    import com.fasterxml.jackson.annotation.JsonProperty;


    public class PageDTO<T> {

        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;
        @JsonProperty("available_seats")
        private List<T> availableSeats;

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<T> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<T> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/service/RoomService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Seat;

    import java.util.ArrayList;

    public interface RoomService {
        ArrayList<Seat> getAvailableSeats();
        int getTotalRows();
        int getTotalColumns();


    }
  learner_created: true
- name: src/cinema/dto/ErrorMessage.java
  visible: true
  learner_created: true
- name: src/cinema/constants/EnumMessage.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 15 Dec 2022 22:59:59 UTC"
record: 2
